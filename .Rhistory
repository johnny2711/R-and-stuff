X <- data[, 2:var]
X <- matrix(c(rep(1,n),X),ncol=var)
XT = t(X)
XTX = XT%*%X
invXTX = solve(XTX)
XTy = XT%*%y
beta = invXTX %*% XTy
}
reg(n=50, MU = NA, SIGMA = NA)
print(reg)
general_OLS<-function(nvar, #Number of variables
MU,   #Vector of means
SIGMA,#Variance-covariance matrix
N     #Sample size
){
#The following if statements enable parameters not to be given in the call
#of the function. If they are not given, a value is totally randomly
#attributed. For instance, the total number of variables is between
# 2 and 102.
if(is.na(nvar)){
nvar<-floor(runif(1,0,1)*100+2)
}
if(is.na(MU)){
MU<-runif(nvar, 5, 25)
}
#The definition of arbitrary variance-covariance matrix is a little bit
#technical, because it has to be symmetrical and positive definite.
#To do this, we "just" have to compute a random matrix X, and form the
#matrix X.t(X), which is positive definite and invertible.
if(is.na(SIGMA)){
coeff_sigma<- runif(nvar*nvar, 0, 1)
SIG<- matrix(coeff_sigma, ncol = nvar, nrow = nvar)
SIGMA<-SIG%*%t(SIG)
}
if(is.na(N)){
N<-floor(runif(1,0,1)*1000+5*nvar)
}
sample<- mvrnorm(N, mu = MU, Sigma = SIGMA)
Y<- sample[, 1]
X<- cbind(rep(1, N), sample[, c(2:(nvar))])
XT = t(X)
XTX = XT%*%X
invXTX = solve(XTX)
XTy = XT%*%Y
beta = invXTX %*% XTy
return(beta)
if(nvar == 2){
graph<-plot(sample)
abline(lm(sample[,2]~sample[,1]), col="red")
abline(a=beta[1], b=beta[2], col="blue")
}
#This part is not functional, there is only the idea
if(nvar == 3){
library(plot3D)
graph<-persp3D(x = sample[, 2], y = sample[, 3], z = sample[, 1], colvar = z)
}
return(graph)
}
general_OLS(nvar = 2, MU = NA, SIGMA = NA, N = NA)
reg(n=50, MU = NA, SIGMA = NA)
reg(50, MU = NA, SIGMA = NA)
n <- 100
var <- 4
reg <- function(n, MU, SIGMA){
# MU and SIGMA are randomely chosen unless specific values are assigned
if(is.na(MU)){
MU<-runif(var, 1, 50)
}
if(is.na(SIGMA)){
coeff_sigma<- runif(var*var, 0, 1)
SIG<- matrix(coeff_sigma, ncol = var, nrow = var)
SIGMA<-SIG%*%t(SIG)
}
if(is.na(n)){
n<-floor(runif(1,0,1)*1000+5*var)
}
data <- mvrnorm(n, mu = MU, Sigma = SIGMA)
y <- data[,1]
X <- data[, 2:var]
X <- matrix(c(rep(1,n),X),ncol=var)
XT = t(X)
XTX = XT%*%X
invXTX = solve(XTX)
XTy = XT%*%y
beta = invXTX %*% XTy
}
reg(n = NA, MU = NA, SIGMA = NA)
reg(n = NA, MU = NA, SIGMA = NA)
View(reg)
X<- cbind(rep(1, n), data[, c(2:(var))])
X<- cbind(rep(1, N), sample[, c(2:(nvar))])
N=10
X<- cbind(rep(1, N), sample[, c(2:(nvar))])
nvar=5
X<- cbind(rep(1, N), sample[, c(2:(nvar))])
general_OLS<-function(nvar, #Number of variables
MU,   #Vector of means
SIGMA,#Variance-covariance matrix
N     #Sample size
){
#The following if statements enable parameters not to be given in the call
#of the function. If they are not given, a value is totally randomly
#attributed. For instance, the total number of variables is between
# 2 and 102.
sample<- mvrnorm(N, mu = MU, Sigma = SIGMA)
Y<- sample[, 1]
X<- cbind(rep(1, N), sample[, c(2:(nvar))])
XT = t(X)
XTX = XT%*%X
n <- 100
var <- 4
reg <- function(n, MU, SIGMA){
# MU and SIGMA are randomely chosen unless specific values are assigned
if(is.na(MU)){
MU<-runif(var, 1, 50)
}
if(is.na(SIGMA)){
coeff_sigma<- runif(var*var, 0, 1)
SIG<- matrix(coeff_sigma, ncol = var, nrow = var)
SIGMA<-SIG%*%t(SIG)
}
data <- mvrnorm(n, mu = MU, Sigma = SIGMA)
y <- data[,1]
X<- cbind(rep(1, n), data[, c(2:(var))])
XT = t(X)
XTX = XT%*%X
invXTX = solve(XTX)
XTy = XT%*%y
beta = invXTX %*% XTy
}
reg(n = NA, MU = NA, SIGMA = NA)
n <- 100
var <- 4
reg <- function(n, MU, SIGMA){
# MU and SIGMA are randomely chosen unless specific values are assigned
if(is.na(MU)){
MU<-runif(var, 1, 50)
}
if(is.na(SIGMA)){
coeff_sigma<- runif(var*var, 0, 1)
SIG<- matrix(coeff_sigma, ncol = var, nrow = var)
SIGMA<-SIG%*%t(SIG)
}
data <- mvrnorm(n, mu = MU, Sigma = SIGMA)
y <- data[,1]
X<- cbind(rep(1, n), data[, c(2:(var))])
X <- data[, 2:var]
X <- matrix(c(rep(1,n),X),ncol=var)
XT = t(X)
XTX = XT%*%X
invXTX = solve(XTX)
XTy = XT%*%y
beta = invXTX %*% XTy
}
print(d)
}
n <- 100
var <- 4
reg <- function(n, MU, SIGMA){
# MU and SIGMA are randomely chosen unless specific values are assigned
if(is.na(MU)){
MU<-runif(var, 1, 50)
}
if(is.na(SIGMA)){
coeff_sigma<- runif(var*var, 0, 1)
SIG<- matrix(coeff_sigma, ncol = var, nrow = var)
SIGMA<-SIG%*%t(SIG)
}
data <- mvrnorm(n, mu = MU, Sigma = SIGMA)
y <- data[,1]
X<- cbind(rep(1, n), data[, c(2:(var))])
X <- data[, 2:var]
X <- matrix(c(rep(1,n),X),ncol=var)
XT = t(X)
XTX = XT%*%X
invXTX = solve(XTX)
XTy = XT%*%y
beta = invXTX %*% XTy
}
n <- 100
var <- 4
reg <- function(n, MU, SIGMA){
# MU and SIGMA are randomely chosen unless specific values are assigned
if(is.na(MU)){
MU<-runif(var, 1, 50)
}
if(is.na(SIGMA)){
coeff_sigma<- runif(var*var, 0, 1)
SIG<- matrix(coeff_sigma, ncol = var, nrow = var)
SIGMA<-SIG%*%t(SIG)
}
data <- mvrnorm(n, mu = MU, Sigma = SIGMA)
y <- data[,1]
X<- cbind(rep(1, n), data[, c(2:(var))])
XT = t(X)
XTX = XT%*%X
invXTX = solve(XTX)
XTy = XT%*%y
beta = invXTX %*% XTy
}
reg(n = NA, MU = NA, SIGMA = NA)
reg(n = 50, MU = NA, SIGMA = NA)
n <- 100
var <- 4
reg <- function(n, MU, SIGMA){
# MU and SIGMA are randomely chosen unless specific values are assigned
if(is.na(MU)){
MU<-runif(var, 1, 50)
}
if(is.na(SIGMA)){
coeff_sigma<- runif(var*var, 0, 1)
SIG<- matrix(coeff_sigma, ncol = var, nrow = var)
SIGMA<-SIG%*%t(SIG)
}
data <- mvrnorm(n, mu = MU, Sigma = SIGMA)
y <- data[,1]
X <- data[, 2:var]
X <- matrix(c(rep(1,n),X),ncol=var)
XT = t(X)
XTX = XT%*%X
invXTX = solve(XTX)
XTy = XT%*%y
beta = invXTX %*% XTy
}
reg(n = 50, MU = NA, SIGMA = NA)
n <- 100
var <- 4
reg <- function(n, MU, SIGMA){
# MU and SIGMA are randomely chosen unless specific values are assigned
if(is.na(MU)){
MU<-runif(var, 1, 50)
}
if(is.na(SIGMA)){
coeff_sigma<- runif(var*var, 0, 1)
SIG<- matrix(coeff_sigma, ncol = var, nrow = var)
SIGMA<-SIG%*%t(SIG)
}
data <- mvrnorm(n, mu = MU, Sigma = SIGMA)
y <- data[,1]
X <- data[, 2:var]
X <- matrix(c(rep(1,n),X),ncol=var)
XT = t(X)
XTX = XT%*%X
invXTX = solve(XTX)
XTy = XT%*%y
beta = invXTX %*% XTy
beta
}
reg(n = 50, MU = NA, SIGMA = NA)
install.packages("devtools")
install.packages("testthat")
install.packages("roxygen2")
install.packages("igraph")
n <- 4
p <- 1.0
A <- matrix(0, nrow=n, ncol=n)
for(i in 1:n){
for(j in 1:i){
if(i != j){
if(runif(1) <= p){
A[i, j] <- 1
}
}
}
}
A <- A + t(A)
A
plot(graph_from_adjacency_matrix(A))
plot(graph_from_adjacency_matrix(A))
n <- 4
p <- 1.0
A <- matrix(0, nrow=n, ncol=n)
for(i in 1:n){
for(j in 1:i){
if(i != j){
if(runif(1) <= p){
A[i, j] <- 1
}
}
}
}
A <- A + t(A)
A
for(i in 1:n){
for(j in 1:(i-1){
if(runif(1) <= p){
A[i, j] <- 1
}
}
}
A <- A + t(A)
A
for(i in 1:n){
for(j in 1:(i-1){
if(runif(1) <= p){
A[i, j] <- 1
}
}
n <- 4
p <- 1.0
A <- matrix(0, nrow=n, ncol=n)
for(i in 1:n){
for(j in 1:i){
if(i != j){
if(runif(1) <= p){
A[i, j] <- 1
}
}
}
}
A <- A + t(A)
A
plot(graph_from_adjacency_matrix(A))
for(i in 1:n){
for(j in 1:(i-1){
if(i != j){
if(runif(1) <= p){
A[i, j] <- 1
}
}
}
}
A <- A + t(A)
A
for(i in 2:n){
for(j in 1:(i-1){
print(c(i,j))
if(runif(1) <= p){
A[i, j] <- 1
}
}
}
A <- A + t(A)
A
for(i in 2:i){
for(j in 1:(i-1){
print(c(i,j))
if(runif(1) <= p){
A[i, j] <- 1
}
}
}
A <- A + t(A)
A
n <- 4
p <- 1.0
A <- matrix(0, nrow=n, ncol=n)
for(i in 1:n){
for(j in 1:i){
if(i != j){
if(runif(1) <= p){
A[i, j] <- 1
}
}
}
}
A <- A + t(A)
A
A <- matrix(0, nrow=n, ncol=n)
for(i in 1:n){
for(j in 1:(i-1)){
if(runif(1) <= p){
A[i, j] <- 1
}
}
}
A <- A + t(A)
A
for(i in 2:n){
for(j in 1:(i-1)){
if(runif(1) <= p){
A[i, j] <- 1
}
}
}
A <- A + t(A)
A
for(i in 1:n){
for(j in 1:(i-1)){
if(runif(1) <= p){
A[i, j] <- 1
}
}
}
A <- A + t(A)
A
A <- matrix(0, nrow=n, ncol=n)
for(i in 2:n){
for(j in 1:(i-1)){
if(runif(1) <= p){
A[i, j] <- 1
}
}
}
A <- A + t(A)
A
A <- matrix(0, nrow=n, ncol=n)
for(i in 2:n){
for(j in 1:(i-1)){
if(runif(1) <= p){
A[i, j] <- 1
}
}
}
A
A=matrix(1,2,3,4,nrow=2)
A=matrix(data=1,2,3,4,nrow=2)
A=matrix(data=c(1,2,3,4), nrow=2)
print(a)
print(A)
A=matrix(data=c(1,3,2,4), nrow=2)
print(A)
B=matrix(c=(5,7,6,8),nrow=2)
B=matrix(c=(5,7,6,8), nrow=2)
B=matrix(c(5,7,6,8), nrow=2)
print(B)
determinant(A)
determinant.matrix(A)
determinant.matrix(B)
det(A)
det(B)
require(MASS)
ginv(A)
ginv(B)
minors_A=matrix(data=c(4,2,3,1),nrow=2)
print(minors_A)
minors_B=matrix(data=c(6,8,7,5), nrow=2
print(minors_B)
minors_B=matrix(data=c(6,8,7,5), nrow=2)
print(minors_B)
t(minors_A)
t(minors_B)
adjugate_A=t(minors_A)
adjugate_B=t(minors_B)
inverse_A=adjugate_A/det(A)
print(inverse_A)
ginv(A)
inverse_B=adjugate_A7det(B)
inverse_B=adjugate_B/det(B)
print(inverse_B)
ginv(B)
print(inverse_A)
ginv(A)
minors_B=matrix(data=c(8,6,7,5), nrow=2)
adjugate_B=t(minors_B)
inverse_B=adjugate_B/det(B)
print(inverse_B)
ginv(B)
help(cbind)
cbind(a1,a2)
a1=c(1,3)
a2=c(2,4)
b1=c(5,7)
b2=c(6,8)
cbind(a1,a2)
cbind(b1,b2)
solve(A)
ginv(A)
solve(B)
ginv(B)
invA*B=inverse_A*B
invAxB=inverse_A*B
invBxA=inverse_B*A
invBxB=inverse_B*B
invBxB=inverse_B*B
read.csv(character-deaths)
read.csv(character-deaths.csv)
read.csv("character-deaths.csv")
read.csv("character-deaths.csv")
columnnames(character-deaths.csv)
columnnames("character-deaths.csv")
data_got=read.csv("character-deaths.csv")
columnnames(data_got)
rownames(data_got)
colnames(data_got)
summary(data_got)
data_got[,"Death.Year"]
data_got[703,]
data_got[702,]
data_got[1,]
data_got[4,]
data_got[,"Book.Intro.Chapter"]
data_got[218,]
data_got[839,]
help("aggregate")
aggreagate(data_got[,3], list(data_got$Allegiances), mean)
aggregate(data_got[,3], list(data_got$Allegiances), mean)
data_got2=read.csv("character-deaths.csv")
data_got2[is.na(data_got2)]=325
data_got2[,"Death Year"]
data_got2=read.csv("character-deaths.csv")
data_got2[is.na(data_got2)]=325
data_got2[,"Death Year"]
data_got2
colnames(data_got2)
data_got2[,"Death Year"]
data_got[,"Death Year"]
data_got2[,"Death.Year"]
aggregate(data_got2[,3], list(data_got$Allegiances), mean)
require(data.table)
install.packages("data.table")
require(data.table)
setDT(data_got2)["average lifespan":=aggregate(data_got2[,3], list(data_got$Allegiances), mean)]
setDT(data_got2)["average lifespan":=(data_got2[,3], list(data_got$Allegiances), mean)]
library(dplyr)
install.packages("dplyr")
data_got3=data.table(data_got2,key = "Allegiances")
require(data.table)
data_got3=data.table(data_got2,key = "Allegiances")
data_got3[,Death.Year.by.Allegiances := mean(Allegiances), by=subject ]
data_got3[,Death.Year.by.Allegiances := mean(Death.Year), by=Allegiances]
data_got3
